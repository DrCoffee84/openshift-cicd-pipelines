apiVersion: v1
kind: Template
metadata:
  name: cd-pipeline-jenkinsfile
  annotations:
    openshift.io/display-name: CD Pipeline - Jenkisfile embedded
    iconClass: fa fa-code
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-cd-pipeline-jenkinsfile
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          pipeline {
              agent any
              options {
                  skipDefaultCheckout()
                  disableConcurrentBuilds()
              }
              stages {
                  stage("Version?") {
                    steps {
                      script {
                        env.TAG_NAME = input (id: 'tag', message: 'What configuration branch/tag will I get?',
                                            parameters: [string(defaultValue: 'master', name: 'Branch')]);
                      }
                    }
                  }
                  stage("Checkout") {
                    steps {
                      //gatherParameters(parameters)
                      echo """
                      APP_GIT_REPO: ${env.APP_GIT_REPO}
                      APP_GIT_BRANCH: ${env.APP_GIT_BRANCH}
                      APP_GIT_SECRET: ${env.JENKINS_PROJECT_NAME}-${env.APP_GIT_SECRET}
                      """
                      gitCheckout(
                        repo: env.APP_GIT_REPO,
                        branch: env.APP_GIT_BRANCH,
                        secret: "${env.JENKINS_PROJECT_NAME}-${env.APP_GIT_SECRET}")
                      sh "ls -la ${pwd()}"
                    }
                  }

                  stage("Promote Image") {
                      steps {
                          script {
                              env.SRC_REGISTRY_CREDENTIALS = "${env.JENKINS_PROJECT_NAME}-${env.SRC_REGISTRY_CREDENTIALS}"
                              env.DST_REGISTRY_CREDENTIALS = "${env.JENKINS_PROJECT_NAME}-${env.DST_REGISTRY_CREDENTIALS}"
                              env.SRC_IMAGE_URL="${env.SRC_REGISTRY_URL}/${env.IMAGE_NAME}:${env.TAG_NAME}"
                              env.DST_IMAGE_URL="${env.DST_REGISTRY_URL}/${env.IMAGE_NAME}:${env.TAG_NAME}"
                          }

                          echo """
                          env.IMAGE_NAME: ${env.IMAGE_NAME}
                          env.TAG_NAME: ${env.TAG_NAME}

                          env.SRC_REGISTRY_URL: ${env.SRC_REGISTRY_URL}
                          env.SRC_REGISTRY_CREDENTIALS: ${env.SRC_REGISTRY_CREDENTIALS}
                          env.SRC_REGISTRY_PROJECT: ${env.SRC_REGISTRY_PROJECT}
                          env.DST_REGISTRY_URL: ${env.DST_REGISTRY_URL}
                          env.DST_REGISTRY_CREDENTIALS: ${env.DST_REGISTRY_CREDENTIALS}
                          env.DST_REGISTRY_PROJECT: ${env.DST_REGISTRY_PROJECT}

                          env.JENKINS_PROJECT_NAME: ${env.JENKINS_PROJECT_NAME}
                          env.SRC_IMAGE_URL: "${env.SRC_IMAGE_URL}"
                          env.DST_IMAGE_URL: "${env.DST_IMAGE_URL}"
                          """

                          withDockerRegistry([credentialsId: env.SRC_REGISTRY_CREDENTIALS, url: "http://${env.SRC_REGISTRY_URL}"]) {
                              withDockerRegistry([credentialsId: env.DST_REGISTRY_CREDENTIALS, url: "http://${env.DST_REGISTRY_URL}"]) {
                                  script {
                                      openshift.withCluster {
                                          openshift.raw("image mirror", "--insecure",
                                            "${SRC_IMAGE_URL}",
                                            "${DST_IMAGE_URL}")
                                      }
                                  }
                              }
                          }
                      }
                  }

                  stage("Apply Template Prod") {
                      steps {
                          script {
                              env.LOCAL_CLUSTER_CREDENTIALS = "${env.JENKINS_PROJECT_NAME}-${env.LOCAL_CLUSTER_CREDENTIALS}"
                              env.REMOTO_CLUSTER_CREDENTIALS = "${env.JENKINS_PROJECT_NAME}-${env.REMOTO_CLUSTER_CREDENTIALS}"
                          }

                          echo """
                          remoteCluster: env.REMOTO_CLUSTER_URL ${env.REMOTO_CLUSTER_URL}
                          project: env.PROJECT_NAME ${env.PROJECT_NAME},
                          application: env.APP_NAME ${env.APP_NAME},
                          template: env.APP_TEMPLATE ${env.APP_TEMPLATE},
                          parameters: env.APP_TEMPLATE_PARAMETERS_PROD ${env.APP_TEMPLATE_PARAMETERS_PROD},
                          replaceConfig: env.APP_REPLACE_CONFIG_PROD ${env.APP_REPLACE_CONFIG_PROD},
                          deploymentPatch: env.APP_DEPLOYMENT_PATCH_PROD ${env.APP_DEPLOYMENT_PATCH_PROD},
                          cm: env.APP_CONFIGMAP_DIR_LOCAL ${env.APP_CONFIGMAP_DIR_LOCAL}
                          cm: env.APP_CONFIGMAP_DIR_REMOTO ${env.APP_CONFIGMAP_DIR_REMOTO}
                          local cluser credentialas: env.LOCAL_CLUSTER_CREDENTIALS ${env.LOCAL_CLUSTER_CREDENTIALS}
                          remote cluster credentials: env.REMOTO_CLUSTER_CREDENTIALS ${env.REMOTO_CLUSTER_CREDENTIALS}
                          """

                      }
                  }
                  stage("Deploy Prod") {
                      steps {
                          echo """
                          project: env.PROJECT_NAME ${env.PROJECT_NAME},
                          application: env.APP_NAME ${env.APP_NAME},
                          image: env.IMAGE_NAME ${env.IMAGE_NAME},
                          tag: env.TAG_NAME ${env.TAG_NAME},
                          remoteCluster: env.REMOTO_CLUSTER_URL ${env.REMOTO_CLUSTER_URL}
                          remote cluster credentials: env.REMOTO_CLUSTER_CREDENTIALS ${env.REMOTO_CLUSTER_CREDENTIALS}
                          """

                          // Primero en Produccíon local
                          echo "apply template cluster local"
                          deployImage(project: env.PROJECT_NAME,
                              application: env.APP_NAME,
                              image: env.APP_NAME,
                              tag: env.TAG_NAME)

                          // Luego en Produccíon remoto
                          echo "apply template cluster remote"
                          deployImage(
                              clusterUrl: env.REMOTO_CLUSTER_URL,
                              credentialsId: env.REMOTO_CLUSTER_CREDENTIALS,
                              project: env.PROJECT_NAME,
                              application: env.APP_NAME,
                              image: env.APP_NAME,
                              tag: env.TAG_NAME)
                      }
                  }
              }
          }
        env:
          - name: APP_NAME
            value: ${APP_NAME}
          - name: APP_GIT_REPO
            value: ${APP_GIT_REPO}
          - name: APP_GIT_BRANCH
            value: ${APP_GIT_BRANCH}
          - name: APP_GIT_SECRET
            value: ${APP_GIT_SECRET}
          - name: OPENSHIFT_DIR
            value: ${OPENSHIFT_DIR}
          - name: PROJECT_NAME
            value: ${PROJECT_NAME}
          - name: APP_TEMPLATE
            value: ${APP_NAME}/openshift/template.yaml
          - name: APP_TEMPLATE_PARAMETERS_PROD
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/templateParameters.txt
          - name: APP_REPLACE_CONFIG_PROD
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/replaceConfig.yaml
          - name: APP_DEPLOYMENT_PATCH_PROD
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/deploymentPatch.yaml
          - name: APP_CONFIGMAP_DIR
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/cm/
          - name: APP_CONFIGMAP_DIR_LOCAL
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/${APP_CM_LOCAL}/
          - name: APP_CONFIGMAP_DIR_REMOTO
            value: ${APP_NAME}/openshift/environments/${PARAM_ENV}/${APP_CM_REMOTO}/
          - name: IMAGE_REPO_URL
            value: ${IMAGE_REPO_URL}
          - name: IMAGE_NAME
            value: ${IMAGE_NAME}
          - name: JENKINS_PROJECT_NAME
            value: ${JENKINS_PROJECT_NAME}
          - name: SRC_REGISTRY_URL
            value: ${SRC_REGISTRY_URL}
          - name: SRC_REGISTRY_CREDENTIALS
            value: ${SRC_REGISTRY_CREDENTIALS}
          - name: SRC_REGISTRY_PROJECT
            value: ${SRC_REGISTRY_PROJECT}
          - name: DST_REGISTRY_URL
            value: ${DST_REGISTRY_URL}
          - name: DST_REGISTRY_CREDENTIALS
            value: ${DST_REGISTRY_CREDENTIALS}
          - name: DST_REGISTRY_PROJECT
            value: ${DST_REGISTRY_PROJECT}
          - name: LOCAL_CLUSTER_URL
            value: ${LOCAL_CLUSTER_URL}
          - name: LOCAL_CLUSTER_CREDENTIALS
            value: ${LOCAL_CLUSTER_CREDENTIALS}
          - name: REMOTO_CLUSTER_URL
            value: ${REMOTO_CLUSTER_URL}
          - name: REMOTO_CLUSTER_CREDENTIALS
            value: ${REMOTO_CLUSTER_CREDENTIALS}

      type: JenkinsPipeline
parameters:
- description: Proyecto destino
  displayName: Proyecto destino
  name: PROJECT_NAME
  required: true
- description: Environment a desplegar
  displayName: Environment a desplegar
  name: PARAM_ENV
  required: true
- description: Application Name
  displayName: Application Name
  name: APP_NAME
  required: true
- description: Git Repository
  displayName: Git Repository
  name: APP_GIT_REPO
  required: true
- description: Git Branch
  displayName: Git Branch
  name: APP_GIT_BRANCH
  required: true
- description: APP Git Secret
  displayName: APP Git Secret
  name: APP_GIT_SECRET
  required: true
- description: APP Directorio de configuracion cluster remoto
  displayName: APP Directorio de configuracion cluster remoto
  name: APP_CM_REMOTO
  required: true
- description: APP Directorio de configuracion cluster local
  displayName: APP Directorio de configuracion cluster local
  name: APP_CM_LOCAL
  required: true
- description: Git Repository
  displayName: Git Repository
  name: GIT_REPO
  required: true
- description: Git Branch
  displayName: Git Branch
  name: GIT_BRANCH
  value: master
  required: true
- description: OpenShift Directory
  displayName: OpenShift Directory
  name: OPENSHIFT_DIR
  value: ./
  required: true
- description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  name: IMAGE_NAME
  required: true
- name: JENKINS_PROJECT_NAME
  value: custom-cicd
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: false
- name: SRC_REGISTRY_URL
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: SRC_REGISTRY_CREDENTIALS
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: SRC_REGISTRY_PROJECT
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: DST_REGISTRY_URL
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: DST_REGISTRY_CREDENTIALS
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: DST_REGISTRY_PROJECT
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: LOCAL_CLUSTER_URL
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: LOCAL_CLUSTER_CREDENTIALS
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: REMOTO_CLUSTER_URL
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- name: REMOTO_CLUSTER_CREDENTIALS
  description: Nombre de la imagen como se encuentra en el Repo Nexus
  displayName: Image name
  required: true
- description: Webhook Secret
  displayName: Webhook Secret
  name: WEBHOOK_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{40}"
