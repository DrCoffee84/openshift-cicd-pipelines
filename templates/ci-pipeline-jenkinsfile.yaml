apiVersion: v1
kind: Template
metadata:
  name: ci-pipeline-jenkinsfile
  annotations:
    openshift.io/display-name: CI Pipeline
    iconClass: fa fa-code
objects:
- apiVersion: v1
  kind: BuildConfig
  metadata:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}-pipeline-jenkinsfile
  spec:
    strategy:
      jenkinsPipelineStrategy:
        jenkinsfile: |-
          pipeline {
            agent any
            options {
              skipDefaultCheckout()
              disableConcurrentBuilds()
            }

            environment {
              // Secret de acceso al git con la configuraci√≥n de las apps
              APP_GIT_SECRET = "${env.DEV_PROJECT}-git-access"
              
              // Pasar por fuera del pipeline
              ENV = 'dev'
              TAG_NAME = 'latest'
              REGISTRY = 'image-registry.openshift-image-registry.svc:5000'
              
              
              // Funcional
              APP_OPENSHIFT_DIR = "./openshift"
              APP_OPENSHIFT_BUILD = "${APP_OPENSHIFT_DIR}/build"
              APP_OPENSHIFT_OVERLAY = "${APP_OPENSHIFT_DIR}/overlays/${ENV}"

            }

            stages {
              stage("Checkout") {
                steps {
                  //gatherParameters(parameters)
                  echo """
                  APP_GIT_REPO: ${env.APP_GIT_REPO}
                  APP_GIT_BRANCH: ${env.APP_GIT_BRANCH}
                  APP_GIT_SECRET: ${env.APP_GIT_SECRET}
                  """
                  gitCheckout(
                    repo: env.APP_GIT_REPO,
                    branch: env.APP_GIT_BRANCH,
                    secret: "${env.APP_GIT_SECRET}")
                  sh "ls -la ${pwd()}"
                }
              }
              stage("Build") {
                steps {
                  echo """
                  - Build Stage
                  project: env.DEV_PROJECT ${env.DEV_PROJECT},
                  application: env.APP_NAME ${env.APP_NAME},
                  """
                  configBuild(
                      project: env.DEV_PROJECT,
                  )
                  buildImage(
                      project: env.DEV_PROJECT,
                      application: env.APP_NAME
                  )
                }
              }
              stage("Apply Kustomize") {
                steps {
                  echo """
                  kustomizeDir: ${env.APP_OPENSHIFT_OVERLAY}
                  """
                  sh "ls -la ${env.APP_OPENSHIFT_OVERLAY}"
                  applyKustomize(
                      project: env.DEV_PROJECT,
                      kustomizeDir: env.APP_OPENSHIFT_OVERLAY
                  )
                }
              }
              stage("Deploy DEV") {
                steps {
                  deployImage(
                    project: env.DEV_PROJECT,
                    application: env.APP_NAME,
                    image: "${REGISTRY}/${env.DEV_PROJECT}/${env.APP_NAME}",
                    tag: env.TAG_NAME
                  )
                }
              }
            }
          }
        env:
          - name: APP_NAME
            value: ${APP_NAME}
          - name: APP_GIT_REPO
            value: ${APP_GIT_REPO}
          - name: APP_GIT_BRANCH
            value: ${APP_GIT_BRANCH}
          - name: DEV_PROJECT
            value: ${PROJECT_NAME}
      type: JenkinsPipeline
parameters:
- description: Proyecto destino
  displayName: Proyecto destino
  name: PROJECT_NAME
  required: true
- description: Application Name
  displayName: Application Name
  name: APP_NAME
  required: true
- description: Git Repository
  displayName: Git Repository
  name: APP_GIT_REPO
  required: true
- description: Git Branch
  displayName: Git Branch
  name: APP_GIT_BRANCH
  required: true
- description: Webhook Secret
  displayName: Webhook Secret
  name: WEBHOOK_SECRET
  generate: expression
  from: "[a-zA-Z0-9]{40}"
